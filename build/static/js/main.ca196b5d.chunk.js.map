{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","components/AddAuthor.js","components/Add.js","App.js","index.js"],"names":["getBooksQuery","gql","getAuthorsQuery","addBookMutation","getSingleBookQuery","addAuthorMutation","BookDetails","props","result","useQuery","variables","id","loading","error","data","book","style","marginLeft","position","Card","Image","src","Math","floor","random","wrapped","ui","Content","Header","author","name","age","visibility","Meta","className","genre","Description","books","length","extra","Label","basic","color","Icon","filter","b","map","key","BookList","useState","bookId","setBookId","searchQuery","setSearchQuery","filteredData","setFilteredData","people","console","log","Grid","columns","divided","Row","Column","Segment","raised","ribbon","List","animated","verticalAlign","Input","fluid","icon","placeholder","value","onChange","e","target","searchFilteredData","item","toLowerCase","match","onClick","floated","size","AddBook","setName","setGenre","authorId","setAuthorId","useMutation","update","proxy","readQuery","query","addBook","writeQuery","refetchQueries","mutationLoading","mutationError","Form","onSubmit","preventDefault","Field","type","label","control","authors","Button","AddAuthor","setAge","addAuthor","parseInt","Add","panes","menuItem","content","render","Tab","Pane","client","ApolloClient","uri","App","Container","Menu","pointing","secondary","Item","active","marginTop","width","ReactDOM","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.ca196b5d.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\n\nconst getBooksQuery = gql`\n  {\n    books {\n      id\n      name\n    }\n  }\n`;\n\nconst getAuthorsQuery = gql`\n  {\n    authors {\n      id\n      name\n    }\n  }\n`;\n\nconst addBookMutation = gql`\n  mutation AddBook($name: String!, $genre: String!, $authorId: ID!) {\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\n      id\n      name\n    }\n  }\n`;\n\nconst getSingleBookQuery = gql`\n  query Book($id: ID!) {\n    book(id: $id) {\n      id\n      name\n      genre\n      author {\n        id\n        name\n        age\n        books {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst addAuthorMutation = gql`\n  mutation AddAuthor($name: String!, $age: Int!) {\n    addAuthor(name: $name, age: $age) {\n      id\n      name\n    }\n  }\n`;\n\nexport {\n  getBooksQuery,\n  getAuthorsQuery,\n  addBookMutation,\n  getSingleBookQuery,\n  addAuthorMutation,\n};\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { getSingleBookQuery } from \"../queries/queries\";\n\n// sem-ui\nimport { Card, Icon, Image, Label } from \"semantic-ui-react\";\n\nfunction BookDetails(props) {\n  const result = useQuery(getSingleBookQuery, { variables: { id: props.id } });\n\n  const { loading, error, data } = result;\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error</p>;\n  const { book } = data;\n\n  const people = [\n    \"matthew.png\",\n    \"steve.jpg\",\n    \"molly.png\",\n    \"jenny.jpg\",\n    \"elliot.jpg\",\n    \"daniel.jpg\",\n    \"helen.jpg\",\n    \"veronika.jpg\",\n    \"elyse.png\",\n    \"matt.jpg\",\n  ];\n\n  return (\n    <div style={{ marginLeft: \"50px\", position: \"fixed\" }}>\n      <Card>\n        <Image\n          src={`https://react.semantic-ui.com/images/avatar/large/${\n            people[Math.floor(Math.random() * 10)]\n          }`}\n          wrapped\n          ui={false}\n        />\n        <Card.Content>\n          <Card.Header>\n            {book.author.name}. {book.author.age}\n          </Card.Header>\n          <hr style={{ visibility: \"hidden\" }} />\n          <Card.Meta>\n            <span className=\"date\">Book Title: {book.name}</span>\n          </Card.Meta>\n          <Card.Meta>\n            <span className=\"date\">Genre: {book.genre}</span>\n          </Card.Meta>\n          <Card.Description> </Card.Description>\n        </Card.Content>\n        {book.author.books.length > 0 ? (\n          <Card.Content extra>\n            <Label basic color=\"blue\">\n              <Icon name=\"book\" color=\"blue\" />\n              {book.author.books.length - 1} other{\" \"}\n              {book.author.books.length - 1 === 1 ? (\n                <span>publication</span>\n              ) : (\n                <span>publications</span>\n              )}{\" \"}\n              by {book.author.name}\n              <hr style={{ visibility: \"hidden\" }} />\n              {book.author.books\n                .filter((b) => b.id !== book.id)\n                .map((book) => (\n                  <li key={book.id}>{book.name}</li>\n                ))}\n            </Label>\n          </Card.Content>\n        ) : null}\n      </Card>\n    </div>\n  );\n}\n\nexport default BookDetails;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { getBooksQuery } from \"../queries/queries\";\n\n// components\nimport BookDetails from \"./BookDetails\";\n\n// sem-ui\nimport {\n  Grid,\n  Image,\n  List,\n  Segment,\n  Card,\n  Label,\n  Input,\n  Item,\n} from \"semantic-ui-react\";\n\nfunction BookList() {\n  const [bookId, setBookId] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filteredData, setFilteredData] = useState(null);\n\n  const result = useQuery(getBooksQuery);\n\n  const { loading, error, data } = result;\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error</p>;\n\n  const people = [\n    \"matthew.png\",\n    \"steve.jpg\",\n    \"molly.png\",\n    \"jenny.jpg\",\n    \"elliot.jpg\",\n    \"daniel.jpg\",\n    \"helen.jpg\",\n    \"veronika.jpg\",\n    \"elyse.png\",\n    \"matt.jpg\",\n  ];\n  console.log(data);\n  const handleSearch = (e) => {\n    setSearchQuery(e.target.value);\n\n    const dataFilter = (item) =>\n      item.name.toLowerCase().match(searchQuery.toLowerCase()) && true;\n    const searchFilteredData = data.books.filter(dataFilter);\n\n    setFilteredData(searchFilteredData);\n  };\n\n  return (\n    <>\n      <Grid columns={2} divided>\n        <Grid.Row>\n          <Grid.Column>\n            <Segment raised>\n              <Label color=\"teal\" ribbon>\n                Books\n              </Label>\n              <List animated verticalAlign=\"middle\">\n                <Input\n                  fluid\n                  icon=\"search\"\n                  placeholder=\"Search books...\"\n                  value={searchQuery}\n                  onChange={handleSearch}\n                />\n                {filteredData\n                  ? filteredData &&\n                    filteredData.map((book) => (\n                      <Card\n                        fluid\n                        key={book.id}\n                        onClick={(e) => setBookId(book.id)}\n                      >\n                        <Card.Content>\n                          <Image\n                            floated=\"right\"\n                            size=\"mini\"\n                            src={`https://react.semantic-ui.com/images/avatar/large/${\n                              people[Math.floor(Math.random() * 10)]\n                            }`}\n                          />\n                          <Card.Header>{book.name}</Card.Header>\n                        </Card.Content>\n                      </Card>\n                    ))\n                  : data.books &&\n                    data.books.map((book) => (\n                      <Card\n                        fluid\n                        key={book.id}\n                        onClick={(e) => setBookId(book.id)}\n                      >\n                        <Card.Content>\n                          <Image\n                            floated=\"right\"\n                            size=\"mini\"\n                            src={`https://react.semantic-ui.com/images/avatar/large/${\n                              people[Math.floor(Math.random() * 10)]\n                            }`}\n                          />\n                          <Card.Header>{book.name}</Card.Header>\n                        </Card.Content>\n                      </Card>\n                    ))}\n              </List>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>{bookId && <BookDetails id={bookId} />}</Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n}\n\nexport default BookList;\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport {\n  getBooksQuery,\n  getAuthorsQuery,\n  addBookMutation,\n} from \"../queries/queries\";\n\n// sem-ui\nimport { Button, Form, Menu, Label, Tab } from \"semantic-ui-react\";\n\nfunction AddBook() {\n  const [name, setName] = useState(\"\");\n  const [genre, setGenre] = useState(\"\");\n  const [authorId, setAuthorId] = useState(\"\");\n\n  const result = useQuery(getAuthorsQuery);\n  const { loading, error, data } = result;\n\n  const [\n    addBook,\n    { loading: mutationLoading, error: mutationError },\n  ] = useMutation(addBookMutation, {\n    update(proxy, result) {\n      const data = proxy.readQuery({ query: getBooksQuery });\n      data.books = [result.data.addBook, ...data.books];\n      proxy.writeQuery({\n        query: getBooksQuery,\n        data,\n      });\n    },\n    refetchQueries: [{ query: getBooksQuery }],\n  });\n\n  if (loading || mutationLoading) return <p>Loading...</p>;\n  if (error || mutationError) return <p>Error</p>;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addBook({\n      variables: { name, genre, authorId },\n    });\n    setName(\"\");\n    setGenre(\"\");\n    setAuthorId(\"\");\n  };\n\n  return (\n    <div>\n      <Form onSubmit={handleSubmit}>\n        <Form.Field>\n          <label>Book Name</label>\n          <input\n            value={name}\n            type=\"text\"\n            onChange={(e) => setName(e.target.value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Genre</label>\n          <input\n            value={genre}\n            type=\"text\"\n            onChange={(e) => setGenre(e.target.value)}\n          />\n        </Form.Field>\n\n        <Form.Field\n          fluid\n          label=\"Author\"\n          control=\"select\"\n          value={authorId}\n          onChange={(e) => setAuthorId(e.target.value)}\n        >\n          <option>Select Author</option>\n          {data.authors &&\n            data.authors.map((author) => (\n              <option key={author.id} value={author.id}>\n                {author.name}\n              </option>\n            ))}\n        </Form.Field>\n        <Button type=\"submit\" basic color=\"teal\">\n          Add Book\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default AddBook;\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { getAuthorsQuery, addAuthorMutation } from \"../queries/queries\";\n\n// sem-ui\nimport { Button, Form } from \"semantic-ui-react\";\n\nfunction AddAuthor() {\n  const [name, setName] = useState(\"\");\n  const [age, setAge] = useState(0);\n\n  const result = useQuery(getAuthorsQuery);\n  const { loading, error, data } = result;\n\n  const [\n    addAuthor,\n    { loading: mutationLoading, error: mutationError },\n  ] = useMutation(addAuthorMutation, {\n    update(proxy, result) {\n      const data = proxy.readQuery({ query: getAuthorsQuery });\n      data.authors = [result.data.addAuthor, ...data.authors];\n      proxy.writeQuery({\n        query: getAuthorsQuery,\n        data,\n      });\n    },\n  });\n\n  if (loading || mutationLoading) return <p>Loading...</p>;\n  if (error || mutationError) return <p>Error</p>;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addAuthor({\n      variables: { name, age },\n    });\n    setName(\"\");\n    setAge(0);\n  };\n\n  return (\n    <div>\n      <Form onSubmit={handleSubmit}>\n        <Form.Field>\n          <label>Author Name</label>\n          <input\n            value={name}\n            type=\"text\"\n            onChange={(e) => setName(e.target.value)}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>Age</label>\n          <input\n            value={age}\n            type=\"number\"\n            onChange={(e) => setAge(parseInt(e.target.value))}\n          />\n        </Form.Field>\n\n        <Button type=\"submit\" basic color=\"teal\">\n          Add Author\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nexport default AddAuthor;\n","import React from \"react\";\n\n// component\nimport AddBook from \"./AddBook\";\nimport AddAuthor from \"./AddAuthor\";\n\n// sem-ui\nimport { Tab } from \"semantic-ui-react\";\n\nfunction Add(props) {\n  const panes = [\n    {\n      menuItem: { key: \"books\", icon: \"book\", content: \"Add Book\" },\n      render: () => (\n        <Tab.Pane>\n          <AddBook />\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: { key: \"author\", icon: \"users\", content: \"Add Author\" },\n      render: () => (\n        <Tab.Pane>\n          <AddAuthor />\n        </Tab.Pane>\n      ),\n    },\n  ];\n\n  const TabMenuItem = () => <Tab panes={panes} />;\n\n  return <>{TabMenuItem()}</>;\n}\n\nexport default Add;\n","import React from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n// sem-ui\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Container, Icon } from \"semantic-ui-react\";\nimport { Grid, Menu } from \"semantic-ui-react\";\n\n// components\nimport BookList from \"./components/BookList\";\nimport Add from \"./components/Add\";\n\n// apollo client setup\nconst client = new ApolloClient({\n  uri: \"https://book-keeper-app-server.herokuapp.com/graphql\",\n});\n\nfunction App() {\n  return (\n    <Container>\n      <ApolloProvider client={client}>\n        <Menu pointing secondary>\n          <Menu.Item>\n            <Icon name=\"book\" color=\"teal\" />\n          </Menu.Item>\n          <Menu.Item\n            name=\"Book Keeper Application\"\n            active={true}\n            color=\"teal\"\n          />\n        </Menu>\n\n        <Grid columns={2} divided style={{ marginTop: \"20px\" }}>\n          <Grid.Row>\n            <Grid.Column width={4}>\n              <Add />\n            </Grid.Column>\n            <Grid.Column width={12}>\n              <BookList />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </ApolloProvider>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}